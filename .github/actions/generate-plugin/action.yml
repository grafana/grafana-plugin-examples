name: Generate Plugin and test
description: Generates a plugin using create-plugin and builds it

inputs:
  plugin-name:
    description: Plugin name
    required: true
  plugin-org:
    description: Plugin org
    required: true
  plugin-type:
    description: Plugin type
    required: true
  has-backend:
    description: Plugin has backend
    required: true

outputs:
  plugin-dir:
    description: Directory of generated plugin
    value: ${{ steps.generate.outputs.plugin-dir}}

runs:
  using: composite
  steps:
    - name: Setup nodejs 22
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: 22

    - name: Run create plugin
      id: generate
      shell: bash
      run: |
        CMD_ARGS="--plugin-name=${PLUGIN_NAME} --org-name=${PLUGIN_ORG} --plugin-type=${PLUGIN_TYPE}"
        # based on has-backend pass --backend or --no-backend
        if [ "${HAS_BACKEND}" = "true" ]; then
          CMD_ARGS="$CMD_ARGS --backend"
        else
          CMD_ARGS="$CMD_ARGS --no-backend"
        fi
        npx -y @grafana/create-plugin@latest $(echo $CMD_ARGS)
        DIR_NAME="$PLUGIN_ORG-$PLUGIN_NAME-$PLUGIN_TYPE"
        echo "plugin-dir=$DIR_NAME" >> $GITHUB_OUTPUT
        echo "Plugin Generated at $DIR_NAME"
      env:
        PLUGIN_NAME: ${{ inputs.plugin-name }}
        PLUGIN_ORG: ${{ inputs.plugin-org }}
        PLUGIN_TYPE: ${{ inputs.plugin-type }}
        HAS_BACKEND: ${{ inputs.has-backend }}

    - name: Setup Go environment
      if: inputs.has-backend == 'true'
      shell: bash
      run: |
        echo "uses go"

    - name: Setup Go environment
      if: inputs.has-backend == 'true'
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: './${{ steps.generate.outputs.plugin-dir }}/go.mod'

    - name: Build backend
      if: inputs.has-backend == 'true'
      uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b # v3.1.0
      with:
        version: latest
        args: build:linux
        workdir: ${{ steps.generate.outputs.plugin-dir }}

    - name: Build plugin frontend
      id: build
      shell: bash
      run: |
        npm install
        npm run build
      working-directory: ${{ steps.generate.outputs.plugin-dir }}

