name: integration tests
on: pull_request

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.set-examples.outputs.examples }}
    steps:
      - uses: actions/checkout@v2
      - id: set-examples
        run: echo "::set-output name=examples::$(find ./examples -name package.json -type f -print | xargs grep -l '"e2e":' | xargs -n 1 dirname | jq -R -s -c 'split("\n")[:-1]')"
  run-integration-tests:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        examples: ${{ fromJson(needs.setup-matrix.outputs.examples) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: yarn
          cache-dependency-path: ${{ matrix.examples }}

      - uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        working-directory: ${{ matrix.examples }}

      - name: Build plugin frontend
        run: yarn build
        working-directory: ${{ matrix.examples }}

      - name: Check for backend Mage file
        id: backend-check
        run: echo "::set-output name=MAGEFILE_EXISTS::$(test -f ./Magefile.go && echo true || echo false)"
        working-directory: ${{ matrix.examples }}

      - name: Build plugin backend
        uses: magefile/mage-action@v1
        with:
          version: latest
          args: -v build:linux
          workdir: ${{ matrix.examples }}
        if: steps.backend-check.outputs.MAGEFILE_EXISTS == 'true'

      - name: Start Docker container using expected versions
        run: yarn server:expected
        working-directory: ${{ matrix.examples }}

      - name: Start Integration tests using expected versions
        run: yarn e2e
        working-directory: ${{ matrix.examples }}

      - name: Stop and remove Docker container
        run: docker-compose down
        working-directory: ${{ matrix.examples }}

      - name: Bulding plugin with latest version of e2e libraries
        run: yarn upgrade @grafana/e2e-selectors @grafana/e2e --latest
        working-directory: ${{ matrix.examples }}

      - name: Start Docker container using latest version of grafana
        run: GRAFANA_VERSION=latest docker-compose up -d --build
        working-directory: ${{ matrix.examples }}

      - name: Start Integration tests using latest version of Grafana
        run: yarn e2e
        working-directory: ${{ matrix.examples }}

      - name: Stop and remove Docker container
        run: docker-compose down
        working-directory: ${{ matrix.examples }}

      ## TODO: Note that this is using the `test` dist-tag right now whilst
      # we wait on build-pipeline updates
      - name: Get NPM canary version
        run: echo "NPM_CANARY_VERSION=$(npm view @grafana/ui dist-tags.test)" >> $GITHUB_ENV

      - name: nuke node_modules folder
        run: rm -rf node_modules
        working-directory: ${{ matrix.examples }}

      - name: Upgrade @grafana packages using canary_version
        run: yarn upgrade $(echo $(cat package.json | jq -r --arg version $NPM_CANARY_VERSION '["@grafana/eslint-config", "@grafana/tsconfig"] as $blacklist | [(.devDependencies,.dependencies) | keys] | flatten | unique | map(select ( test("^@grafana") ) ) as $deps | $deps - $blacklist | join("@\($version) ")') )
        working-directory: ${{ matrix.examples }}

      - name: Build example plugin with latest @grafana dependencies
        run: yarn build
        working-directory: ${{ matrix.examples }}

      - name: Start Docker container using latest version of grafana
        run: GRAFANA_VERSION=$NPM_CANARY_VERSION docker-compose up -d --build
        working-directory: ${{ matrix.examples }}

      - name: Start Integration tests using latest version of Grafana
        run: yarn e2e
        working-directory: ${{ matrix.examples }}

      - name: Stop and remove Docker container
        run: docker-compose down
        working-directory: ${{ matrix.examples }}
