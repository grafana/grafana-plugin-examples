name: integration tests
on: pull_request

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      pluginDirs: ${{ steps.set-plugin-dirs.outputs.pluginDirs }}
    steps:
      - uses: actions/checkout@v2
      - id: set-plugin-dirs
        run: echo "::set-output name=pluginDirs::$(find ./examples -name package.json -type f -print | xargs grep -l '"e2e":' | xargs -n 1 dirname | jq -R -s -c 'split("\n")[:-1]')"
  run-integration-tests:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pluginDir: ${{ fromJson(needs.setup-matrix.outputs.pluginDirs) }}
      fail-fast: false
    env:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_BASIC_ENABLED: "false"
      GF_DEFAULT_APP_MODE: "development"
      GF_INSTALL_PLUGINS: "marcusolsson-static-datasource"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: yarn
          cache-dependency-path: ${{ matrix.pluginDir }}

      - uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
        working-directory: ${{ matrix.pluginDir }}

      - name: Build plugin frontend
        run: |
          yarn build
        working-directory: ${{ matrix.pluginDir }}

      - name: Check for backend Mage file
        id: backend-check
        run: |
          echo "::set-output name=MAGEFILE_EXISTS::$(test -f ./Magefile.go && echo true || echo false)"
        working-directory: ${{ matrix.pluginDir }}

      - name: Build plugin backend
        uses: magefile/mage-action@v1
        with:
          version: latest
          args: -v build:linux
          workdir: ${{ matrix.pluginDir }}
        if: steps.backend-check.outputs.MAGEFILE_EXISTS == 'true'

      ## CANARY_VERSION has to use NPM as we only publish the packages on changes
      - name: Set environment vars for testing
        run: |
          echo "PLUGIN_ID=$(cat src/plugin.json | jq -r '.id')" >> $GITHUB_ENV
          echo "EXPECTED_GRAFANA_VERSION=$(npx semver $(cat src/plugin.json | jq -r '.dependencies.grafanaDependency') -c)" >> $GITHUB_ENV
          echo "CANARY_VERSION=$(npm view @grafana/ui dist-tags.canary)" >> $GITHUB_ENV
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Docker container using expected version of grafana
        run: |
          docker run -d -p 3000:3000 --name grafana -v ${PWD}/dist:/var/lib/grafana/plugins/$PLUGIN_ID -v ${PWD}/provisioning:/etc/grafana/provisioning -e GF_DEFAULT_APP_MODE -e GF_INSTALL_PLUGINS -e GF_AUTH_ANONYMOUS_ORG_ROLE -e GF_AUTH_ANONYMOUS_ENABLED -e GF_AUTH_BASIC_ENABLED grafana/grafana:$EXPECTED_GRAFANA_VERSION
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Integration tests using expected versions
        id: expected-versions-tests
        run: |
          yarn e2e
        working-directory: ${{ matrix.pluginDir }}

      - name: Uploading artifacts for tests with expected versions
        uses: actions/upload-artifact@v3
        with:
          name: expected-versions-tests
          path: |
            ${{ matrix.pluginDir }}/cypress/screenshots
            ${{ matrix.pluginDir }}/cypress/videos
            ${{ matrix.pluginDir }}/cypress/report.json
          retention-days: 3
        if: steps.expected-versions-tests.outcome != 'success'

      - name: Stop and remove Docker container
        run: |
          docker stop grafana && docker rm grafana
        working-directory: ${{ matrix.pluginDir }}

      - name: Bulding plugin with latest version of e2e libraries
        run: |
          yarn upgrade @grafana/e2e-selectors @grafana/e2e --latest
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Docker container using latest version of grafana
        run: |
          docker run -d -p 3000:3000 --name grafana -v ${PWD}/dist:/var/lib/grafana/plugins/$PLUGIN_ID -v ${PWD}/provisioning:/etc/grafana/provisioning -e GF_DEFAULT_APP_MODE -e GF_INSTALL_PLUGINS -e GF_AUTH_ANONYMOUS_ORG_ROLE -e GF_AUTH_ANONYMOUS_ENABLED -e GF_AUTH_BASIC_ENABLED grafana/grafana:latest
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Integration tests using latest version of Grafana
        id: latest-version-grafana-tests
        run: yarn e2e
        working-directory: ${{ matrix.pluginDir }}

      - name: Uploading artifacts for tests with latest version of Grafana
        uses: actions/upload-artifact@v3
        with:
          name: latest-version-grafana-tests
          path: |
            ${{ matrix.pluginDir }}/cypress/screenshots
            ${{ matrix.pluginDir }}/cypress/videos
            ${{ matrix.pluginDir }}/cypress/report.json
          retention-days: 3
        if: steps.latest-version-grafana-tests.outcome != 'success'

      - name: Stop and remove Docker container
        run: |
          docker stop grafana && docker rm grafana
        working-directory: ${{ matrix.pluginDir }}

      # Yarn 1 doesn't remove nested deps on `upgrade` so we need to delete node_modules first
      - name: Delete node_modules folder
        run: |
          rm -rf node_modules
        working-directory: ${{ matrix.pluginDir }}

      - name: Upgrade @grafana packages using canary_version
        run: |
          yarn upgrade $(echo $(cat package.json | jq -r --arg version $CANARY_VERSION '["@grafana/eslint-config", "@grafana/tsconfig"] as $blacklist | [(.devDependencies,.dependencies) | keys] | flatten | unique | map(select ( test("^@grafana") ) ) as $deps | $deps - $blacklist | map("\(.)@\($version)") | join(" ")') )
        working-directory: ${{ matrix.pluginDir }}

      - name: Build example plugin with latest @grafana dependencies
        run: |
          yarn build
        working-directory: ${{ matrix.pluginDir }}

      # Canary versions live at grafana/grafana-dev
      - name: Start Docker container using latest version of grafana
        run: |
          docker run -d -p 3000:3000 --name grafana -v ${PWD}/dist:/var/lib/grafana/plugins/$PLUGIN_ID -v ${PWD}/provisioning:/etc/grafana/provisioning -e GF_DEFAULT_APP_MODE -e GF_INSTALL_PLUGINS -e GF_AUTH_ANONYMOUS_ORG_ROLE -e GF_AUTH_ANONYMOUS_ENABLED -e GF_AUTH_BASIC_ENABLED grafana/grafana-dev:$CANARY_VERSION
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Integration tests using latest version of Grafana
        id: latest-versions-tests
        run: |
          yarn e2e
        working-directory: ${{ matrix.pluginDir }}

      - name: Uploading artifacts for tests with latest versions
        uses: actions/upload-artifact@v3
        with:
          name: latest-versions-tests
          path: |
            ${{ matrix.pluginDir }}/cypress/screenshots
            ${{ matrix.pluginDir }}/cypress/videos
            ${{ matrix.pluginDir }}/cypress/report.json
          retention-days: 3
        if: steps.latest-versions-tests.outcome != 'success'

      - name: Stop and remove Docker container
        run: |
          docker stop grafana && docker rm grafana
        working-directory: ${{ matrix.pluginDir }}
