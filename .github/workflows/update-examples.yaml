name: Update plugin examples from create-plugin

on:
  schedule:
    - cron: "0 0 * * 0" # Run weekly (every Sunday at midnight UTC)
  workflow_dispatch: # Enable manual trigger
  repository_dispatch: # Enable external trigger
  push:
    branches:
      - academo/scaffold-basic-examples

jobs:
  generate-new-examples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # examples: ['panel-basic', 'datasource-basic', 'app-basic', 'datasource-backend', 'app-backend']
        examples: ['panel-basic', 'datasource-basic']
        include:
          - examples: panel-basic
            plugin-name: basicscaffold
            plugin-org: grafana
            plugin-type: panel
            has-backend: false
            artifact-name: grafana-basicscaffold-panel
          - examples: datasource-basic
            plugin-name: basicscaffold
            plugin-org: grafana
            plugin-type: datasource
            has-backend: false
            artifact-name: grafana-basicscaffold-datasource
          # - examples: app-basic
          #   plugin-name: basicscaffold
          #   plugin-org: grafana
          #   plugin-type: app
          #   has-backend: false
          # - examples: datasource-backend
          #   plugin-name: backendscaffold
          #   plugin-org: grafana
          #   plugin-type: datasource
          #   has-backend: true
          # - examples: app-backend
          #   plugin-name: backendscaffold
          #   plugin-org: grafana
          #   plugin-type: app
          #   has-backend: true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup nodejs 22
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22

      - name: Run create plugin
        id: generate
        shell: bash
        run: |
          CMD_ARGS="--plugin-name=${PLUGIN_NAME} --org-name=${PLUGIN_ORG} --plugin-type=${PLUGIN_TYPE}"
          # based on has-backend pass --backend or --no-backend
          if [ "${HAS_BACKEND}" = "true" ]; then
            CMD_ARGS="$CMD_ARGS --backend"
          else
            CMD_ARGS="$CMD_ARGS --no-backend"
          fi
          npx -y @grafana/create-plugin@latest $(echo $CMD_ARGS)
          DIR_NAME="$PLUGIN_ORG-$PLUGIN_NAME-$PLUGIN_TYPE"
          echo "plugin-dir=$DIR_NAME" >> $GITHUB_OUTPUT
          echo "Plugin Generated at $DIR_NAME"
        env:
          PLUGIN_NAME: ${{ matrix.plugin-name }}
          PLUGIN_ORG: ${{ matrix.plugin-org }}
          PLUGIN_TYPE: ${{ matrix.plugin-type }}
          HAS_BACKEND: ${{ matrix.has-backend }}


      # UNCOMMENT BEFORE PR OR MERGE!
      # - name: Setup Go environment
      #   if: matrix.has-backend == 'true'
      #   shell: bash
      #   run: |
      #     echo "uses go"
      #
      # - name: Setup Go environment
      #   if: matrix.has-backend == 'true'
      #   uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      #   with:
      #     go-version-file: './${{ steps.generate.outputs.plugin-dir }}/go.mod'
      #
      # - name: Build backend
      #   if: matrix.has-backend == 'true'
      #   uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b # v3.1.0
      #   with:
      #     version: latest
      #     args: build:linux
      #     workdir: ${{ steps.generate.outputs.plugin-dir }}
      #
      # - name: Build plugin frontend
      #   id: build
      #   shell: bash
      #   run: |
      #     npm install
      #     npm run build
      #   working-directory: ${{ steps.generate.outputs.plugin-dir }}
      #
      - name: Echo artifact name
        run: |
          echo "Artifact name: ${{steps.generate.outputs.plugin-dir}}"

      - name: Upload math result for job 1
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.artifact-name}}
          path: ./${{steps.generate.outputs.plugin-dir}}
          if-no-files-found: error
          overwrite: true
          include-hidden-files: true


  update-examples:
    runs-on: ubuntu-latest
    needs: generate-new-examples
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Download grafana-basicscaffold-panel
        uses: actions/download-artifact@v4
        with:
          name: grafana-basicscaffold-panel

      - name: Download grafana-basicscaffold-datasource
        uses: actions/download-artifact@v4
        with:
          name: grafana-basicscaffold-datasource

      - name: run
        shell: bash
        run: ls -l

      # - name: Generate Panel plugin
      #   uses: ./.github/actions/generate-plugin
      #   id: generate-basic-panel
      #   with:
      #     plugin-name: basicscaffold
      #     plugin-org: grafana
      #     plugin-type: panel
      #     has-backend: false
      #
      # - name: Generate Datasource plugin
      #   uses: ./.github/actions/generate-plugin
      #   id: generate-basic-datasource
      #   with:
      #     plugin-name: basicscaffold
      #     plugin-org: grafana
      #     plugin-type: datasource
      #     has-backend: false
      #
      # - name: Generate App plugin
      #   uses: ./.github/actions/generate-plugin
      #   id: generate-basic-app
      #   with:
      #     plugin-name: basicscaffold
      #     plugin-org: grafana
      #     plugin-type: app
      #     has-backend: false
      #
      # - name: Generate Datasource plugin with backend
      #   uses: ./.github/actions/generate-plugin
      #   id: generate-backend-datasource
      #   with:
      #     plugin-name: backendscaffold
      #     plugin-org: grafana
      #     plugin-type: datasource
      #     has-backend: trur
      #
      # - name: Generate App plugin with backend
      #   uses: ./.github/actions/generate-plugin
      #   id: generate-backend-app
      #   with:
      #     plugin-name: backendscaffold
      #     plugin-org: grafana
      #     plugin-type: app
      #     has-backend: true
      #
      # - name: Replace existing examples with scaffolds
      #   shell: bash
      #   run: |
      #     # remove all existing examples
      #     pushd examples
      #     rm -rf "${BASIC_PANEL_PATH}" "${BASIC_DATASOURCE_PATH}" "${BASIC_APP_PATH}" "${BACKEND_DATASOURCE_PATH}" "${BACKEND_APP_PATH}"
      #     popd
      #
      #     # move new examples
      #     mv "${BASIC_PANEL}" "examples/${BASIC_PANEL_PATH}"
      #     mv "${BASIC_DATASOURCE}" "examples/${BASIC_DATASOURCE_PATH}"
      #     mv "${BASIC_APP}" "examples/${BASIC_APP_PATH}"
      #     mv "${BACKEND_DATASOURCE}" "examples/${BACKEND_DATASOURCE_PATH}"
      #     mv "${BACKEND_APP}" "examples/${BACKEND_APP_PATH}"
      #
      #     ls -la 
      #     ls -la examples
      #
      #   env:
      #     BASIC_PANEL: ${{ steps.generate-basic-panel.outputs.plugin-dir }}
      #     BASIC_DATASOURCE: ${{ steps.generate-basic-datasource.outputs.plugin-dir }}
      #     BASIC_APP: ${{ steps.generate-basic-app.outputs.plugin-dir }}
      #     BACKEND_DATASOURCE: ${{ steps.generate-backend-datasource.outputs.plugin-dir }}
      #     BACKEND_APP: ${{ steps.generate-backend-app.outputs.plugin-dir }}
      #
      #     BASIC_PANEL_PATH: panel-basic
      #     BASIC_DATASOURCE_PATH: datasource-basic
      #     BASIC_APP_PATH: app-basic
      #     BACKEND_DATASOURCE_PATH: datasource-backend
      #     BACKEND_APP_PATH: app-backend
